// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Cartao.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Cartao TABLE
class TableCartao extends SqfEntityTableBase {
  TableCartao() {
    // declare properties of EntityTable
    tableName = 'cartaoes';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('value', DbType.real, isNotNull: true),
      SqfEntityFieldBase('parcela', DbType.text),
      SqfEntityFieldBase('fatura', DbType.integer),
      SqfEntityFieldBase('card', DbType.text),
      SqfEntityFieldBase('due_date', DbType.datetime,
          minValue: DateTime.parse('1900-01-01')),
      SqfEntityFieldBase('category', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCartao();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MyDbModel extends SqfEntityModelProvider {
  MyDbModel() {
    databaseName = myDbModel.databaseName;
    password = myDbModel.password;
    dbVersion = myDbModel.dbVersion;
    preSaveAction = myDbModel.preSaveAction;
    logFunction = myDbModel.logFunction;
    databaseTables = [
      TableCartao.getInstance,
    ];

    bundledDatabasePath = myDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = myDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Cartao
class Cartao extends TableBase {
  Cartao(
      {this.id,
      this.date,
      this.name,
      this.value,
      this.parcela,
      this.fatura,
      this.card,
      this.due_date,
      this.category}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Cartao.withFields(this.date, this.name, this.value, this.parcela, this.fatura,
      this.card, this.due_date, this.category) {
    _setDefaultValues();
  }
  Cartao.withId(this.id, this.date, this.name, this.value, this.parcela,
      this.fatura, this.card, this.due_date, this.category) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Cartao.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['date'].toString())!)
          : DateTime.tryParse(o['date'].toString());
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['value'] != null) {
      value = double.tryParse(o['value'].toString());
    }
    if (o['parcela'] != null) {
      parcela = o['parcela'].toString();
    }
    if (o['fatura'] != null) {
      fatura = int.tryParse(o['fatura'].toString());
    }
    if (o['card'] != null) {
      card = o['card'].toString();
    }
    if (o['due_date'] != null) {
      due_date = int.tryParse(o['due_date'].toString()) != null
          ? DateTime.fromMillisecondsSinceEpoch(
              int.tryParse(o['due_date'].toString())!)
          : DateTime.tryParse(o['due_date'].toString());
    }
    if (o['category'] != null) {
      category = o['category'].toString();
    }
  }
  // FIELDS (Cartao)
  int? id;
  DateTime? date;
  String? name;
  double? value;
  String? parcela;
  int? fatura;
  String? card;
  DateTime? due_date;
  String? category;

  // end FIELDS (Cartao)

  static const bool _softDeleteActivated = false;
  CartaoManager? __mnCartao;

  CartaoManager get _mnCartao {
    return __mnCartao = __mnCartao ?? CartaoManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (parcela != null || !forView) {
      map['parcela'] = parcela;
    }
    if (fatura != null || !forView) {
      map['fatura'] = fatura;
    }
    if (card != null || !forView) {
      map['card'] = card;
    }
    if (due_date != null) {
      map['due_date'] = forJson
          ? due_date!.toString()
          : forQuery
              ? due_date!.millisecondsSinceEpoch
              : due_date;
    } else if (due_date != null || !forView) {
      map['due_date'] = null;
    }
    if (category != null || !forView) {
      map['category'] = category;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (date != null) {
      map['date'] = forJson
          ? date!.toString()
          : forQuery
              ? date!.millisecondsSinceEpoch
              : date;
    } else if (date != null || !forView) {
      map['date'] = null;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }
    if (parcela != null || !forView) {
      map['parcela'] = parcela;
    }
    if (fatura != null || !forView) {
      map['fatura'] = fatura;
    }
    if (card != null || !forView) {
      map['card'] = card;
    }
    if (due_date != null) {
      map['due_date'] = forJson
          ? due_date!.toString()
          : forQuery
              ? due_date!.millisecondsSinceEpoch
              : due_date;
    } else if (due_date != null || !forView) {
      map['due_date'] = null;
    }
    if (category != null || !forView) {
      map['category'] = category;
    }

    return map;
  }

  /// This method returns Json String [Cartao]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Cartao]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      date != null ? date!.millisecondsSinceEpoch : null,
      name,
      value,
      parcela,
      fatura,
      card,
      due_date != null ? due_date!.millisecondsSinceEpoch : null,
      category
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      date != null ? date!.millisecondsSinceEpoch : null,
      name,
      value,
      parcela,
      fatura,
      card,
      due_date != null ? due_date!.millisecondsSinceEpoch : null,
      category
    ];
  }

  static Future<List<Cartao>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Cartao.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Cartao>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Cartao>[];
    try {
      objList = list
          .map((cartao) => Cartao.fromMap(cartao as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Cartao.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Cartao>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Cartao> objList = <Cartao>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Cartao.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Cartao by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Cartao] if exist, otherwise returns null
  Future<Cartao?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Cartao? obj;
    final data = await _mnCartao.getById([id]);
    if (data.length != 0) {
      obj = Cartao.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Cartao) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCartao.insert(this, ignoreBatch);
    } else {
      await _mnCartao.update(this);
    }

    return id;
  }

  /// Saves the (Cartao) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCartao.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCartao.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Cartao. Returns a new Primary Key value of Cartao

  /// <returns>Returns a new Primary Key value of Cartao
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Cartao> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Cartao> cartaos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MyDbModel().batchStart();
    for (final obj in cartaos) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MyDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < cartaos.length; i++) {
        if (cartaos[i].id == null) {
          cartaos[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCartao.rawInsert(
          'INSERT OR REPLACE INTO cartaoes (id, date, name, value, parcela, fatura, card, due_date, category)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            date != null ? date!.millisecondsSinceEpoch : null,
            name,
            value,
            parcela,
            fatura,
            card,
            due_date != null ? due_date!.millisecondsSinceEpoch : null,
            category
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Cartao id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Cartao id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Cartao Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Cartao>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Cartao> cartaos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnCartao.rawInsertAll(
        'INSERT OR REPLACE INTO cartaoes (id, date, name, value, parcela, fatura, card, due_date, category)  VALUES (?,?,?,?,?,?,?,?,?)',
        cartaos,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Cartao

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Cartao invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnCartao
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCartao.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Cartao] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  CartaoFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CartaoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CartaoFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CartaoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {}

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion cartao

// region CartaoField
class CartaoField extends FilterBase {
  CartaoField(CartaoFilterBuilder cartaoFB) : super(cartaoFB);

  @override
  CartaoFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder isNull() {
    return super.isNull() as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CartaoFilterBuilder;
  }

  @override
  CartaoField get not {
    return super.not as CartaoField;
  }
}
// endregion CartaoField

// region CartaoFilterBuilder
class CartaoFilterBuilder extends ConjunctionBase {
  CartaoFilterBuilder(Cartao obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCartao = obj._mnCartao;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CartaoManager? _mnCartao;

  /// put the sql keyword 'AND'
  @override
  CartaoFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CartaoFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CartaoFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CartaoFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CartaoFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CartaoFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CartaoFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CartaoFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CartaoFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CartaoFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CartaoFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CartaoField _setField(CartaoField? field, String colName, DbType dbtype) {
    return CartaoField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CartaoField? _id;
  CartaoField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  CartaoField? _date;
  CartaoField get date {
    return _date = _setField(_date, 'date', DbType.datetime);
  }

  CartaoField? _name;
  CartaoField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  CartaoField? _value;
  CartaoField get value {
    return _value = _setField(_value, 'value', DbType.real);
  }

  CartaoField? _parcela;
  CartaoField get parcela {
    return _parcela = _setField(_parcela, 'parcela', DbType.text);
  }

  CartaoField? _fatura;
  CartaoField get fatura {
    return _fatura = _setField(_fatura, 'fatura', DbType.integer);
  }

  CartaoField? _card;
  CartaoField get card {
    return _card = _setField(_card, 'card', DbType.text);
  }

  CartaoField? _due_date;
  CartaoField get due_date {
    return _due_date = _setField(_due_date, 'due_date', DbType.datetime);
  }

  CartaoField? _category;
  CartaoField get category {
    return _category = _setField(_category, 'category', DbType.text);
  }

  /// Deletes List<Cartao> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCartao!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCartao!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from cartaoes ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCartao!.updateBatch(qparams, values);
  }

  /// This method always returns [Cartao] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Cartao?
  @override
  Future<Cartao?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCartao!.toList(qparams);
    final data = await objFuture;
    Cartao? obj;
    if (data.isNotEmpty) {
      obj = Cartao.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Cartao]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Cartao?
  @override
  Future<Cartao> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Cartao();
  }

  /// This method returns int. [Cartao]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? cartaoCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final cartaosFuture = await _mnCartao!.toList(qparams);
    final int count = cartaosFuture[0]['CNT'] as int;
    if (cartaoCount != null) {
      cartaoCount(count);
    }
    return count;
  }

  /// This method returns List<Cartao> [Cartao]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Cartao>
  @override
  Future<List<Cartao>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Cartao> cartaosData = await Cartao.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return cartaosData;
  }

  /// This method returns Json String [Cartao]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Cartao]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Cartao]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCartao!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Cartao]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM cartaoes WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCartao!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Cartao]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCartao!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Cartao.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCartao!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CartaoFilterBuilder

// region CartaoFields
class CartaoFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.datetime);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fValue;
  static TableField get value {
    return _fValue =
        _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.real);
  }

  static TableField? _fParcela;
  static TableField get parcela {
    return _fParcela =
        _fParcela ?? SqlSyntax.setField(_fParcela, 'parcela', DbType.text);
  }

  static TableField? _fFatura;
  static TableField get fatura {
    return _fFatura =
        _fFatura ?? SqlSyntax.setField(_fFatura, 'fatura', DbType.integer);
  }

  static TableField? _fCard;
  static TableField get card {
    return _fCard = _fCard ?? SqlSyntax.setField(_fCard, 'card', DbType.text);
  }

  static TableField? _fDue_date;
  static TableField get due_date {
    return _fDue_date = _fDue_date ??
        SqlSyntax.setField(_fDue_date, 'due_date', DbType.datetime);
  }

  static TableField? _fCategory;
  static TableField get category {
    return _fCategory =
        _fCategory ?? SqlSyntax.setField(_fCategory, 'category', DbType.text);
  }
}
// endregion CartaoFields

//region CartaoManager
class CartaoManager extends SqfEntityProvider {
  CartaoManager()
      : super(MyDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'cartaoes';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion CartaoManager
class MyDbModelSequenceManager extends SqfEntityProvider {
  MyDbModelSequenceManager() : super(MyDbModel());
}
// END OF ENTITIES
